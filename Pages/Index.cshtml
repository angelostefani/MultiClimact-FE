@page
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@model IndexModel
@{
    // Set the page title using localization
    ViewData["Title"] = Localizer["title"];
}

@* Authentication Check *@
@if (!(User.Identity is null) && !User.Identity.IsAuthenticated)
{
    // Redirect to login page if the user is not authenticated
    Response.Redirect("Identity/Account/Login");
}
else
{
    <!DOCTYPE html>
    <html>
    <head>
        <title>MULTICLIMACT</title>

        <!-- Linking stylesheets for OpenLayers (for maps) and Bootstrap (for UI components) -->
        <link rel="stylesheet" href="~/lib/openlayers/ol.css" type="text/css" />
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
        <link rel="stylesheet" href="~/lib/bootstrap-icons/font/bootstrap-icons.css" />

        <!-- Linking necessary scripts for jQuery and OpenLayers functionality -->
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script src="~/lib/openlayers/dist/ol.js"></script>
    </head>
    <body>

        <!-- Space added to create separation between the layout menu and the page content -->
        <div id="space" style="width: 100%; height: 70px;"></div>

        <!-- PAGE MENU: A partial view for easy navigation -->
        @await Html.PartialAsync("_PageMenu")

        <!-- BREADCRUMB: Displays the current location in the website hierarchy -->
        <div class="container-fluid" style="padding-left: 8px; padding-right: 4px;">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" id="breadcrumb">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                </ol>
            </nav>
        </div>

        <!-- NAVIGATION TABS: Allows users to switch between different map or page views -->
        @await Html.PartialAsync("_NavigationTabs")

        <!-- Collapsible Sidebar on the Left -->
        <div id="mySidebarLeft" class="sidebar-left">
            <!-- Placeholder for additional controls like layer selectors or filters -->
        </div>

        <!-- Fixed Sidebar on the Right -->
        <div id="mySidebarRight" class="sidebar-right fixed-sidebar">
            <!-- Container for navigation icons -->
            <div class="icon-container">
                <!-- Map icon -->
                <div class="icon-wrapper legend-icon-wrapper">
                    <i class="bi bi-map map-icon"></i>
                </div>
                <!-- Globe icon -->
                <div class="icon-wrapper globe-icon-wrapper">
                    <i class="bi bi-globe-europe-africa globe-icon"></i>
                </div>
                <!-- Robot icon -->
                <div class="icon-wrapper robot-icon-wrapper">
                    <i class="bi bi-robot"></i>
                </div>
            </div>
        </div>

        <!-- Collapsible Bottom Bar -->
        @await Html.PartialAsync("_BottomBar")

        <!-- Sidebar and bottom tabs for toggling different UI sections -->
        @*  <div class="tab tab-left" onclick="toggleSidebarLeft()"><i class="bi bi-arrow-right"></i></div> *@
        <div class="tab tab-bottom" onclick="toggleBottomBar()"><i class="bi bi-arrow-up"></i></div>

        <!-- TAB PANELS: Container for different tab views -->
        <div class="tab-content" id="myTabContent">
            @await Html.PartialAsync("_TabPanels_B")
            @await Html.PartialAsync("_TabPanels_C")
            @await Html.PartialAsync("_TabPanels_D")
        </div>

        <!-- Center panel that opens in the middle of the page -->
        <div id="centerPanel" class="center-panel">
            <div id="legendContainer" class="legend-container">
                <h4 class="panel-title">Legends</h4>
                <!-- Legends will be dynamically added here -->
            </div>
        </div>

        <!-- Pannello della Chat -->
        <div id="chatPanel" class="chat-panel" style="display:none;">
            <div class="chat-container">
                <h4 class="chat-title">Ask for help</h4>
                <!-- Area dei messaggi -->
                <div id="chatMessages" class="chat-messages"></div>
                <!-- Campo di input e bottone di invio -->
                <div class="chat-input-container">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Write your question..." />
                    <button class="chat-send-button" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>

        <!-- Data placeholders for JavaScript usage -->
        <!-- These elements store server-side values in data-* attributes, which JavaScript can later retrieve -->

        <span id="idRunLastEarthquake" data-value="@(ViewData["idRunLastEarthquake"] ?? "undefined")"></span>

        @* Dynamic WMS layers data *@
        @for (int i = 0; i <= 12; i++)
        {
            string layerIndex = i.ToString("D2"); // Ensures two-digit formatting for numbers below 10
            <span id="wmsurl_lay@(layerIndex)" data-value="@ViewData[$"wmsurl_lay{layerIndex}"]"></span>
            <span id="wmslayer_lay@(layerIndex)" data-value="@ViewData[$"wmslayer_lay{layerIndex}"]"></span>
        }

        <!-- JavaScript Initialization -->
        <script type="text/javascript">
            // Variables for WMS map configurations, to be populated in maps-init.js
            let configWMSMatrixMapC1;
            let configWMSMatrixMapC2;
            let configWMSMatrixMapC3;
            let configWMSMatrixMapC4;
        </script>
      
        <script src="~/js/site.js" ></script>
        <script src="~/js/earthquake-helper.js"></script>
        <script src="~/js/openlayer-helper.js"></script>
        <script src="~/js/openlayer-wms-helper.js"></script>
        <script src="~/js/menu-helper.js"></script>
        <!-- External JavaScript file containing logic for map interactions and UI behavior -->
        <script src="~/js/maps-init.js"></script>
        <script src="~/js/fixedSidebar-helper.js"></script>
        <script src="~/js/chat.js"></script>

        <script type="text/javascript">
                /**
             * When the document is fully loaded, initialize UI components
             * including tabs, dropdowns, and sidebar interactions.
             */
            $(document).ready(() => {
                initTabs(); // Initialize tab navigation
                tabManager(); // Manage tab selection
                selectTab(activeTab);

                // Gestione del menu a tendina
                setupDropdownMenuHandler('.dropdown-item', '.dropdown-menu');

                // Eventi legati all'icona della mappa
                setupFixedSidebarIconHandler();

                setupChatIconHandler();
            });          
       
        </script>

    </body>
    </html>
}